/*
 * Creative commons CC BY-NC-SA 2020 Yvan Maillot <yvan.maillot@uha.fr>
 *
 *     Share - You can copy and redistribute the material in any medium or format
 * 
 *     Adapt - You can remix, transform, and build upon the material 
 * 
 * Under the following terms :
 * 
 *     Attribution - You must give appropriate credit, provide a link to the license, 
 *     and indicate if changes were made. You may do so in any reasonable manner, 
 *     but not in any way that suggests the licensor endorses you or your use. 
 * 
 *     NonCommercial — You may not use the material for commercial purposes. 
 * 
 *     ShareAlike — If you remix, transform, or build upon the material, 
 *     you must distribute your contributions under the same license as the original. 
 * 
 * Notices:    You do not have to comply with the license for elements of 
 *             the material in the public domain or where your use is permitted 
 *             by an applicable exception or limitation. 
 * 
 * No warranties are given. The license may not give you all of the permissions 
 * necessary for your intended use. For example, other rights such as publicity, 
 * privacy, or moral rights may limit how you use the material. 
 * 
 * See <https://creativecommons.org/licenses/by-nc-sa/4.0/>.
 */

package robot.panneaux;

import interfaces.Detachable;
import robot.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JSlider;

/**
 *
 * @author  Maillot
 */
public class PanneauCommande extends javax.swing.JPanel {
    private static final long serialVersionUID = 1L;
    
    private Detachable frameParente;

    /** Creates new form panneauCommande */
    public PanneauCommande(Detachable frameParente) {
        initComponents();
        this.frameParente = frameParente;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sliderDuréeAction = new javax.swing.JSlider();
        avance = new javax.swing.JButton();
        tourne = new javax.swing.JButton();
        stopLeRobot = new javax.swing.JButton();
        marque = new javax.swing.JButton();
        efface = new javax.swing.JButton();

        sliderDuréeAction.setMajorTickSpacing(50);
        sliderDuréeAction.setMaximum(300);
        sliderDuréeAction.setMinorTickSpacing(10);
        sliderDuréeAction.setPaintLabels(true);
        sliderDuréeAction.setPaintTicks(true);
        sliderDuréeAction.setSnapToTicks(true);
        sliderDuréeAction.setToolTipText("<html>\nDéfinit la durée de référence pour les déplacements du robot.<br>\nEn l'occurence, il s'agit du temps en millisecondes nécessaire au robot pour se déplacer d'une case.\n</html>");
        sliderDuréeAction.setValue(200);
        sliderDuréeAction.setBorder(javax.swing.BorderFactory.createTitledBorder("Vitesse du robot"));
        sliderDuréeAction.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderDuréeActionStateChanged(evt);
            }
        });

        avance.setText("Avance");
        avance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                avanceActionPerformed(evt);
            }
        });

        tourne.setText("Tourne");
        tourne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tourneActionPerformed(evt);
            }
        });

        stopLeRobot.setText("Stoppe le robot");
        stopLeRobot.setToolTipText("<html>\nPour arrêter le robot<br>\nEn case d'erreur.\n</html>");
        stopLeRobot.setVisible(false);
        stopLeRobot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopLeRobotActionPerformed(evt);
            }
        });

        marque.setText("Marque");
        marque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                marqueActionPerformed(evt);
            }
        });

        efface.setText("Efface");
        efface.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                effaceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(stopLeRobot)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tourne)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(efface))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(avance)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(marque)))
                .addGap(44, 44, 44)
                .addComponent(sliderDuréeAction, javax.swing.GroupLayout.PREFERRED_SIZE, 528, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(stopLeRobot)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(avance, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(marque, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tourne)
                            .addComponent(efface)))
                    .addComponent(sliderDuréeAction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents



private void tourneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tourneActionPerformed
        try {
            frameParente.getRobot().tourne();
        } catch (InterruptedException ex) {
            Logger.getLogger(PanneauCommande.class.getName()).log(Level.SEVERE, null, ex);
            frameParente.getRobot().stop();
        }
}//GEN-LAST:event_tourneActionPerformed

private void sliderDuréeActionStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderDuréeActionStateChanged
    frameParente.getRobot().duréeReference = ((JSlider)evt.getSource()).getValue();
}//GEN-LAST:event_sliderDuréeActionStateChanged

private void stopLeRobotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopLeRobotActionPerformed
    frameParente.getRobot().stop();
}//GEN-LAST:event_stopLeRobotActionPerformed

private void marqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_marqueActionPerformed
    // TODO add your handling code here:
    frameParente.getRobot().poserUneMarque();
}//GEN-LAST:event_marqueActionPerformed

private void effaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_effaceActionPerformed
    // TODO add your handling code here:
    frameParente.getRobot().enleverUneMarque();
}//GEN-LAST:event_effaceActionPerformed

private void avanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_avanceActionPerformed
    // TODO add your handling code here:
    try {
        PanneauCommande.this.frameParente.getRobot().avance();
    } catch (DansLeMur ex) {
        Logger.getLogger(PanneauCommande.class.getName()).log(Level.SEVERE, null, ex);
    } 
}//GEN-LAST:event_avanceActionPerformed

public int getDuree() {
    return sliderDuréeAction.getValue();
}
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton avance;
    private javax.swing.JButton efface;
    private javax.swing.JButton marque;
    private javax.swing.JSlider sliderDuréeAction;
    private javax.swing.JButton stopLeRobot;
    private javax.swing.JButton tourne;
    // End of variables declaration//GEN-END:variables

}
